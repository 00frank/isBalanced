{"version":3,"sources":["App.js","utils/isBalancedValidator.js","index.js"],"names":["App","useState","msg","setMsg","isBalanced","setIsBalanced","useEffect","result","message","chars","forEach","emoji","i","replaceAll","getMessageWithoutEmojis","aux","char","push","length","pop","isBalancedValidator","className","type","value","onChange","e","target","ReactDOM","render","document","getElementById"],"mappings":"oOAyBeA,MArBf,WACE,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAUA,OARAC,qBAAU,WACR,GAAIJ,EAAK,CACP,IAAIK,ECLK,SAACC,GACd,IAD0B,EACtBC,EA4BN,SAAiCD,GAC/B,IACID,EASJ,MAVa,CAAC,KAAM,MAGbG,SAAQ,SAACC,EAAOC,GAEnBL,EADQ,IAANK,EACOJ,EAAQK,WAAWF,EAAO,IAE1BJ,EAAOM,WAAWF,EAAO,OAG/BJ,EAvCKO,CAAwBN,GAChCO,EAAM,GACNR,EAAS,aAHa,cAKPE,GALO,IAK1B,2BAA0B,CAAC,IAAhBO,EAAe,QACxB,GAAa,MAATA,EACFD,EAAIE,KAAKD,QACJ,GAAa,MAATA,EAAc,CACvB,GAAkB,IAAfD,EAAIG,OAEL,YADAX,EAAS,iBAGTQ,EAAII,QAbgB,8BAsB1B,OAJIJ,EAAIG,OAAS,IACfX,EAAS,iBAGJA,EDjBUa,CAAoBlB,GAEjCG,EADAE,EAAoB,eAAXA,MAGV,CAACL,IAGF,sBAAKmB,UAAU,MAAf,UACE,uBAAOC,KAAK,OAAOC,MAAOrB,EAAKsB,SAAU,SAAAC,GAAOtB,EAAOsB,EAAEC,OAAOH,UAChE,sBAAMF,UAAU,OAAhB,qFACCnB,GAAO,sBAAMmB,UAAWjB,EAAa,WAAa,eAA3C,SAA4DA,EAAa,kBAAoB,2BEf3GuB,IAASC,OACP,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b7c7b491.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport isBalancedValidator from './utils/isBalancedValidator';\nimport './App.css';\n\nfunction App() {\n  const [msg, setMsg] = useState(\"\")\n  const [isBalanced, setIsBalanced] = useState(true)\n\n  useEffect(() => {\n    if (msg) {\n      let result = isBalancedValidator(msg);\n      result = result === \"balanceado\" ? true : false;\n      setIsBalanced(result);\n    }\n  }, [msg])\n\n  return (\n    <div className=\"App\">\n      <input type=\"text\" value={msg} onChange={e => { setMsg(e.target.value) }} />\n      <span className=\"info\">Ingrese texto dentro de la casilla para validar si esta balanceado o no</span>\n      {msg && <span className={isBalanced ? \"balanced\" : \"not-balanced\"}>{isBalanced ? \"Esta balanceado\" : \"NO esta balanceado\"}</span>}\n    </div>\n  );\n}\n\nexport default App;\n","/**\r\n * @param {string} message - message to validate is or not balanced\r\n * @returns {boolean}\r\n */\r\n/* eslint import/no-anonymous-default-export: [2, {\"allowArrowFunction\": true}] */\r\nexport default (message) => {\r\n  let chars = getMessageWithoutEmojis(message);\r\n  let aux = [];\r\n  let result = \"balanceado\";\r\n\r\n  for (const char of chars) {\r\n    if (char === \"(\") {\r\n      aux.push(char);\r\n    } else if (char === \")\") {\r\n      if(aux.length === 0) {\r\n        result = \"desbalanceado\";\r\n        return;\r\n      } else {\r\n        aux.pop()\r\n      }\r\n    }\r\n  }\r\n\r\n  if (aux.length > 0) {\r\n    result = \"desbalanceado\";\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * @param {string} message - message to remove emojis\r\n * @returns {string}\r\n */\r\nfunction getMessageWithoutEmojis(message) {\r\n  let emojis = [\":)\", \":(\"];\r\n  let result;\r\n\r\n  emojis.forEach((emoji, i) => {\r\n    if (i === 0) {\r\n      result = message.replaceAll(emoji, \"\");\r\n    } else {\r\n      result = result.replaceAll(emoji, \"\")\r\n    }\r\n  })\r\n  return result;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);"],"sourceRoot":""}